# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N15p909ShEFpMeRytKsdmO6nLoo1ZnU-
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Set the directories containing the real and fake image datasets
real_images_dir = '/content/drive/MyDrive/MINI project Sem VI/real_and_fake_face/training_real'
fake_images_dir = '/content/drive/MyDrive/MINI project Sem VI/real_and_fake_face/training_fake'

# Set the image dimensions and batch size
img_width, img_height = 600, 600
batch_size = 35

# Create data generators for real and fake images
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_generator = datagen.flow_from_directory(
    '/content/drive/MyDrive/MINI project Sem VI/real_and_fake_face',
    target_size=(600,600),
    batch_size=35,
    class_mode='binary',
    subset='training')

validation_generator = datagen.flow_from_directory(
    '/content/drive/MyDrive/MINI project Sem VI/real_and_fake_face_detection/real_and_fake_face',
    target_size=(600,600),
    batch_size=35,
    class_mode='binary',
    subset='validation')

validation_generator.class_indices

test_generator = datagen.flow_from_directory(
    '/content/drive/MyDrive/MINI project Sem VI/test',
    target_size=(600, 600),
    batch_size=35,
    class_mode='binary')

# Define the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(600, 600, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(train_generator,
                    steps_per_epoch=train_generator.samples // batch_size,
                    epochs=10,
                    validation_data=validation_generator,
                    validation_steps=validation_generator.samples // batch_size)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(test_generator, steps=len(train_generator) // batch_size)
print("Test Loss:", test_loss)
print("Test Accuracy:", test_acc)

# Predictions on the test set
predictions = model.predict(test_generator, steps=test_generator.samples // batch_size)

# Show predictions and corresponding images
for i in range(len(predictions)):
    if predictions[i] >= 0.5:
        print("The ",i," image is Real Image")
    else:
        print("The ",i," image is Fake Image")

from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
test_path='/content/drive/MyDrive/MINI project Sem VI/test'
for i in os.listdir(test_path):
  img=image.load_img(test_path+'//'+i)
  plt.imshow(img)
  plt.show()
  x=image.img_to_array(img)
  x=np.expand_dims(x,axis=0)
  images=np.vstack([x])
  val=model.predict(images)
  if val >= 0.5:
        print("The ",i," image is Real Image")
  else:
        print("The ",i," image is Fake Image")

model.save('/content/drive/MyDrive/MINI project Sem VI/cnn_model')